{
  "name": "DeprecationRestHandler",
  "type": "class_full",
  "content": "/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the \"Elastic License\n * 2.0\", the \"GNU Affero General Public License v3.0 only\", and the \"Server Side\n * Public License v 1\"; you may not use this file except in compliance with, at\n * your election, the \"Elastic License 2.0\", the \"GNU Affero General Public\n * License v3.0 only\", or the \"Server Side Public License, v 1\".\n */\npackage org.elasticsearch.rest;\n\nimport org.apache.logging.log4j.Level;\nimport org.elasticsearch.client.internal.node.NodeClient;\nimport org.elasticsearch.common.Strings;\nimport org.elasticsearch.common.logging.DeprecationCategory;\nimport org.elasticsearch.common.logging.DeprecationLogger;\n\nimport java.util.Objects;\n\n/**\n * {@code DeprecationRestHandler} provides a proxy for any existing {@link RestHandler} so that usage of the handler can be\n * logged using the {@link DeprecationLogger}.\n */\npublic class DeprecationRestHandler extends FilterRestHandler implements RestHandler {\n\n    public static final String DEPRECATED_ROUTE_KEY = \"deprecated_route\";\n\n    private final String deprecationMessage;\n    private final DeprecationLogger deprecationLogger;\n    private final boolean compatibleVersionWarning;\n    private final String deprecationKey;\n    private final Level deprecationLevel;\n\n    /**\n     * Create a {@link DeprecationRestHandler} that encapsulates the {@code handler} using the {@code deprecationLogger} to log\n     * deprecation {@code warning}.\n     *\n     * @param handler The rest handler to deprecate (it's possible that the handler is reused with a different name!)\n     * @param method a method of a deprecated endpoint\n     * @param path a path of a deprecated endpoint\n     * @param deprecationLevel The level of the deprecation warning, must be non-null\n     *                         and either {@link Level#WARN} or {@link DeprecationLogger#CRITICAL}\n     * @param deprecationMessage The message to warn users with when they use the {@code handler}\n     * @param deprecationLogger The deprecation logger\n     * @param compatibleVersionWarning set to false so that a deprecation warning will be issued for the handled request,\n     *                                 set to true to that a compatibility api warning will be issue for the handled request\n     *\n     * @throws NullPointerException if any parameter except {@code deprecationMessage} is {@code null}\n     * @throws IllegalArgumentException if {@code deprecationMessage} is not a valid header\n     */\n    public DeprecationRestHandler(\n        RestHandler handler,\n        RestRequest.Method method,\n        String path,\n        Level deprecationLevel,\n        String deprecationMessage,\n        DeprecationLogger deprecationLogger,\n        boolean compatibleVersionWarning\n    ) {\n        super(handler);\n        this.deprecationMessage = requireValidHeader(deprecationMessage);\n        this.deprecationLogger = Objects.requireNonNull(deprecationLogger);\n        this.compatibleVersionWarning = compatibleVersionWarning;\n        this.deprecationKey = DEPRECATED_ROUTE_KEY + \"_\" + method + \"_\" + path;\n        if (deprecationLevel != Level.WARN && deprecationLevel != DeprecationLogger.CRITICAL) {\n            throw new IllegalArgumentException(\n                \"unexpected deprecation logger level: \" + deprecationLevel + \", expected either 'CRITICAL' or 'WARN'\"\n            );\n        }\n        this.deprecationLevel = deprecationLevel;\n    }\n\n    /**\n     * {@inheritDoc}\n     * <p>\n     * Usage is logged via the {@link DeprecationLogger} so that the actual response can be notified of deprecation as well.\n     */\n    @Override\n    public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n        if (compatibleVersionWarning == false) {\n            // emit a standard deprecation warning\n            if (Level.WARN == deprecationLevel) {\n                deprecationLogger.warn(DeprecationCategory.API, deprecationKey, deprecationMessage);\n            } else if (DeprecationLogger.CRITICAL == deprecationLevel) {\n                deprecationLogger.critical(DeprecationCategory.API, deprecationKey, deprecationMessage);\n            }\n        } else {\n            // emit a compatibility warning\n            if (Level.WARN == deprecationLevel) {\n                deprecationLogger.compatible(Level.WARN, deprecationKey, deprecationMessage);\n            } else if (DeprecationLogger.CRITICAL == deprecationLevel) {\n                deprecationLogger.compatibleCritical(deprecationKey, deprecationMessage);\n            }\n        }\n\n        getDelegate().handleRequest(request, channel, client);\n    }\n\n    /**\n     * This does a very basic pass at validating that a header's value contains only expected characters according to RFC-5987, and those\n     * that it references.\n     * <p>\n     * https://tools.ietf.org/html/rfc5987\n     * <p>\n     * This is only expected to be used for assertions. The idea is that only readable US-ASCII characters are expected; the rest must be\n     * encoded with percent encoding, which makes checking for a valid character range very simple.\n     *\n     * @param value The header value to check\n     * @return {@code true} if the {@code value} is not obviously wrong.\n     */\n    public static boolean validHeaderValue(String value) {\n        if (Strings.hasText(value) == false) {\n            return false;\n        }\n\n        for (int i = 0; i < value.length(); i++) {\n            char c = value.charAt(i);\n\n            // 32 = ' ' (31 = unit separator); 126 = '~' (127 = DEL)\n            if (c < 32 || c > 126) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Throw an exception if the {@code value} is not a {@link #validHeaderValue(String) valid header}.\n     *\n     * @param value The header value to check\n     * @return Always {@code value}.\n     * @throws IllegalArgumentException if {@code value} is not a {@link #validHeaderValue(String) valid header}.\n     */\n    public static String requireValidHeader(String value) {\n        if (validHeaderValue(value) == false) {\n            throw new IllegalArgumentException(\"header value must contain only US ASCII text\");\n        }\n\n        return value;\n    }\n\n    // test only\n    Level getDeprecationLevel() {\n        return deprecationLevel;\n    }\n}\n",
  "file_path": "./codebase_small/server/src/main/java/org/elasticsearch/rest/DeprecationRestHandler.java"
}