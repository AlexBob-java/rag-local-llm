{
  "name": "BaseRestHandler",
  "type": "class_full",
  "content": "/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the \"Elastic License\n * 2.0\", the \"GNU Affero General Public License v3.0 only\", and the \"Server Side\n * Public License v 1\"; you may not use this file except in compliance with, at\n * your election, the \"Elastic License 2.0\", the \"GNU Affero General Public\n * License v3.0 only\", or the \"Server Side Public License, v 1\".\n */\n\npackage org.elasticsearch.rest;\n\nimport org.apache.lucene.search.spell.LevenshteinDistance;\nimport org.elasticsearch.client.internal.node.NodeClient;\nimport org.elasticsearch.common.bytes.ReleasableBytesReference;\nimport org.elasticsearch.common.settings.Setting;\nimport org.elasticsearch.common.settings.Setting.Property;\nimport org.elasticsearch.common.util.set.Sets;\nimport org.elasticsearch.core.CheckedConsumer;\nimport org.elasticsearch.core.Nullable;\nimport org.elasticsearch.core.RefCounted;\nimport org.elasticsearch.core.Releasable;\nimport org.elasticsearch.core.RestApiVersion;\nimport org.elasticsearch.core.Tuple;\nimport org.elasticsearch.http.HttpBody;\nimport org.elasticsearch.plugins.ActionPlugin;\nimport org.elasticsearch.rest.action.admin.cluster.RestNodesUsageAction;\n\nimport java.io.IOException;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.SortedSet;\nimport java.util.TreeSet;\nimport java.util.concurrent.atomic.LongAdder;\nimport java.util.stream.Collectors;\n\n/**\n * Base handler for REST requests.\n * <p>\n * This handler makes sure that the headers &amp; context of the handled {@link RestRequest requests} are copied over to\n * the transport requests executed by the associated client. While the context is fully copied over, not all the headers\n * are copied, but a selected few. It is possible to control what headers are copied over by returning them in\n * {@link ActionPlugin#getRestHeaders()}.\n */\npublic abstract class BaseRestHandler implements RestHandler {\n\n    public static final Setting<Boolean> MULTI_ALLOW_EXPLICIT_INDEX = Setting.boolSetting(\n        \"rest.action.multi.allow_explicit_index\",\n        true,\n        Property.NodeScope\n    );\n\n    private final LongAdder usageCount = new LongAdder();\n\n    public final long getUsageCount() {\n        return usageCount.sum();\n    }\n\n    /**\n     * @return the name of this handler. The name should be human readable and\n     *         should describe the action that will performed when this API is\n     *         called. This name is used in the response to the\n     *         {@link RestNodesUsageAction}.\n     */\n    public abstract String getName();\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public abstract List<Route> routes();\n\n    private static final Set<String> ALWAYS_SUPPORTED = Set.of(\"format\", \"filter_path\", \"pretty\", \"human\");\n\n    @Override\n    public final void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n        // check if the query has any parameters that are not in the supported set (if declared)\n        Set<String> supported = allSupportedParameters();\n        assert supported == allSupportedParameters() : getName() + \": did not return same instance from allSupportedParameters()\";\n        if (supported != null) {\n            var allSupported = Sets.union(\n                RestResponse.RESPONSE_PARAMS,\n                ALWAYS_SUPPORTED,\n                // these internal parameters cannot be set by end-users, but are used by Elasticsearch internally.\n                // they must be accepted by all handlers\n                RestRequest.INTERNAL_MARKER_REQUEST_PARAMETERS,\n                supported\n            );\n            if (allSupported.containsAll(request.params().keySet()) == false) {\n                Set<String> unsupported = Sets.difference(request.params().keySet(), allSupported);\n                throw new IllegalArgumentException(unrecognized(request, unsupported, allSupported, \"parameter\"));\n            }\n        }\n\n        // prepare the request for execution; has the side effect of touching the request parameters\n        try (var action = prepareRequest(request, client)) {\n\n            assert assertConsumesSupportedParams(supported, request);\n\n            // validate unconsumed params, but we must exclude params used to format the response\n            // use a sorted set so the unconsumed parameters appear in a reliable sorted order\n            final SortedSet<String> unconsumedParams = request.unconsumedParams()\n                .stream()\n                .filter(p -> RestResponse.RESPONSE_PARAMS.contains(p) == false)\n                .filter(p -> responseParams(request.getRestApiVersion()).contains(p) == false)\n                .collect(Collectors.toCollection(TreeSet::new));\n\n            // validate the non-response params\n            if (unconsumedParams.isEmpty() == false) {\n                final Set<String> candidateParams = new HashSet<>();\n                candidateParams.addAll(request.consumedParams());\n                candidateParams.addAll(responseParams(request.getRestApiVersion()));\n                throw new IllegalArgumentException(unrecognized(request, unconsumedParams, candidateParams, \"parameter\"));\n            }\n\n            if (request.hasContent() && (request.isContentConsumed() == false && request.isFullContent())) {\n                throw new IllegalArgumentException(\n                    \"request [\" + request.method() + \" \" + request.path() + \"] does not support having a body\"\n                );\n            }\n\n            usageCount.increment();\n            if (request.isStreamedContent()) {\n                assert action instanceof RequestBodyChunkConsumer;\n                var chunkConsumer = (RequestBodyChunkConsumer) action;\n\n                request.contentStream().setHandler(new HttpBody.ChunkHandler() {\n                    @Override\n                    public void onNext(ReleasableBytesReference chunk, boolean isLast) {\n                        chunkConsumer.handleChunk(channel, chunk, isLast);\n                    }\n\n                    @Override\n                    public void close() {\n                        chunkConsumer.streamClose();\n                    }\n                });\n                action.accept(channel);\n            } else {\n                action.accept(channel);\n                request.getHttpRequest().release();\n            }\n        }\n    }\n\n    private boolean assertConsumesSupportedParams(@Nullable Set<String> supported, RestRequest request) {\n        if (supported != null) {\n            final var supportedAndCommon = new TreeSet<>(supported);\n            supportedAndCommon.add(\"error_trace\");\n            supportedAndCommon.addAll(ALWAYS_SUPPORTED);\n            supportedAndCommon.removeAll(RestRequest.INTERNAL_MARKER_REQUEST_PARAMETERS);\n            final var consumed = new TreeSet<>(request.consumedParams());\n            consumed.removeAll(RestRequest.INTERNAL_MARKER_REQUEST_PARAMETERS);\n            // Response parameters are implicitly consumed since they are made available to response renderings.\n            consumed.addAll(responseParams(request.getRestApiVersion()));\n            assert supportedAndCommon.equals(consumed)\n                : getName() + \": consumed params \" + consumed + \" while supporting \" + supportedAndCommon;\n        }\n        return true;\n    }\n\n    protected static String unrecognized(RestRequest request, Set<String> invalids, Set<String> candidates, String detail) {\n        StringBuilder message = new StringBuilder().append(\"request [\")\n            .append(request.path())\n            .append(\"] contains unrecognized \")\n            .append(detail)\n            .append(invalids.size() > 1 ? \"s\" : \"\")\n            .append(\": \");\n\n        for (Iterator<String> it = invalids.iterator(); it.hasNext();) {\n            String invalid = it.next();\n\n            LevenshteinDistance ld = new LevenshteinDistance();\n            List<String> candidateParams = candidates.stream()\n                .map(c -> Tuple.tuple(ld.getDistance(invalid, c), c))\n                .filter(t -> t.v1() > 0.5f)\n                .sorted(Comparator.<Tuple<Float, String>, Float>comparing(Tuple::v1).reversed().thenComparing(Tuple::v2))\n                .map(Tuple::v2)\n                .toList();\n\n            message.append(\"[\").append(invalid).append(\"]\");\n            if (candidateParams.isEmpty() == false) {\n                message.append(\" -> did you mean \");\n                if (candidateParams.size() > 1) {\n                    message.append(\"any of \");\n                }\n                message.append(candidateParams);\n                message.append(\"?\");\n            }\n\n            if (it.hasNext()) {\n                message.append(\", \");\n            }\n        }\n\n        return message.toString();\n    }\n\n    /**\n     * REST requests are handled by preparing a channel consumer that represents the execution of the request against a channel.\n     */\n    @FunctionalInterface\n    protected interface RestChannelConsumer extends CheckedConsumer<RestChannel, Exception>, Releasable {\n        /**\n         * Called just after the execution has started (or failed, if the request was invalid), but typically well before the execution has\n         * completed. This callback should be used to release (refs to) resources that were acquired when constructing this consumer, for\n         * instance by calling {@link RefCounted#decRef()} on any newly-created transport requests with nontrivial lifecycles.\n         */\n        @Override\n        default void close() {}\n    }\n\n    public interface RequestBodyChunkConsumer extends RestChannelConsumer {\n\n        /**\n         * Handle one chunk of the request body. The handler <b>must</b> close the chunk once it is no longer\n         * needed to avoid leaking.\n         *\n         * @param channel The rest channel associated to the request\n         * @param chunk The chunk of request body that is ready for processing\n         * @param isLast Whether the chunk is the last one of the request\n         */\n        void handleChunk(RestChannel channel, ReleasableBytesReference chunk, boolean isLast);\n\n        /**\n         * Called when the stream closes. This could happen prior to the completion of the request if the underlying channel was closed.\n         * Implementors should do their best to clean up resources and early terminate request processing if it is triggered before a\n         * response is generated.\n         */\n        default void streamClose() {}\n    }\n\n    /**\n     * Prepare the request for execution. Implementations should consume all request params before\n     * returning the runnable for actual execution. Unconsumed params will immediately terminate\n     * execution of the request. However, some params are only used in processing the response;\n     * implementations can override {@link BaseRestHandler#responseParams()} to indicate such\n     * params.\n     *\n     * @param request the request to execute\n     * @param client  client for executing actions on the local node\n     * @return the action to execute\n     * @throws IOException if an I/O exception occurred parsing the request and preparing for\n     *                     execution\n     */\n    protected abstract RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) throws IOException;\n\n    /**\n     * Parameters used for controlling the response and thus might not be consumed during\n     * preparation of the request execution in\n     * {@link BaseRestHandler#prepareRequest(RestRequest, NodeClient)}.\n     *\n     * @return a set of parameters used to control the response and thus should not trip strict\n     * URL parameter checks.\n     */\n    protected Set<String> responseParams() {\n        return Collections.emptySet();\n    }\n\n    /**\n     * Parameters used for controlling the response and thus might not be consumed during\n     * preparation of the request execution. The value depends on the RestApiVersion provided\n     * by a user on a request.\n     * Used in RestHandlers with Compatible Rest Api\n     * @param restApiVersion - a version provided by a user on a request\n     * @return a set of parameters used to control the response, depending on a restApiVersion\n     */\n    protected Set<String> responseParams(RestApiVersion restApiVersion) {\n        return responseParams();\n    }\n}\n",
  "file_path": "./codebase_small/server/src/main/java/org/elasticsearch/rest/BaseRestHandler.java"
}