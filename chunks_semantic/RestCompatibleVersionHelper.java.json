[
  {
    "name": "RestCompatibleVersionHelper",
    "type": "plain_text",
    "content": "/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the \"Elastic License\n * 2.0\", the \"GNU Affero General Public License v3.0 only\", and the \"Server Side\n * Public License v 1\"; you may not use this file except in compliance with, at\n * your election, the \"Elastic License 2.0\", the \"GNU Affero General Public\n * License v3.0 only\", or the \"Server Side Public License, v 1\".\n */\npackage org.elasticsearch.rest;\n\nimport org.elasticsearch.ElasticsearchStatusException;\nimport org.elasticsearch.core.Nullable;\nimport org.elasticsearch.core.RestApiVersion;\nimport org.elasticsearch.xcontent.MediaType;\nimport org.elasticsearch.xcontent.ParsedMediaType;\n\nimport java.util.Optional;\n\n/**\n * A helper that is responsible for parsing a Compatible REST API version from RestRequest.\n * It also performs a validation of allowed combination of versions provided on those headers.\n * Package scope as it is only aimed to be used by RestRequest\n */\nclass RestCompatibleVersionHelper {\n\n    /**\n     * @return The requested API version, or {@link Optional#empty()} if there was no explicit version in the request.\n     */\n    static Optional<RestApiVersion> getCompatibleVersion(\n        @Nullable ParsedMediaType acceptHeader,\n        @Nullable ParsedMediaType contentTypeHeader,\n        boolean hasContent\n    ) {\n        Byte aVersion = parseVersion(acceptHeader);\n        byte acceptVersion = aVersion == null ? RestApiVersion.current().major : Integer.valueOf(aVersion).byteValue();\n        Byte cVersion = parseVersion(contentTypeHeader);\n        byte contentTypeVersion = cVersion == null ? RestApiVersion.current().major : Integer.valueOf(cVersion).byteValue();\n\n        // accept version must be current or prior\n        if (acceptVersion > RestApiVersion.current().major || acceptVersion < RestApiVersion.minimumSupported().major) {\n            throw new ElasticsearchStatusException(\n                \"Accept version must be either version {} or {}, but found {}. Accept={}\",\n                RestStatus.BAD_REQUEST,\n                RestApiVersion.current().major,\n                RestApiVersion.minimumSupported().major,\n                acceptVersion,\n                acceptHeader\n            );\n        }\n        if (hasContent) {\n\n            // content-type version must be current or prior\n            if (contentTypeVersion > RestApiVersion.current().major || contentTypeVersion < RestApiVersion.minimumSupported().major) {\n                throw new ElasticsearchStatusException(\n                    \"Content-Type version must be either version {} or {}, but found {}. Content-Type={}\",\n                    RestStatus.BAD_REQUEST,\n                    RestApiVersion.current().major,\n                    RestApiVersion.minimumSupported().major,\n                    contentTypeVersion,\n                    contentTypeHeader\n                );\n            }\n            // if both accept and content-type are sent, the version must match\n            if (contentTypeVersion != acceptVersion) {\n                throw new ElasticsearchStatusException(\n                    \"A compatible version is required on both Content-Type and Accept headers \"\n                        + \"if either one has requested a compatible version \"\n                        + \"and the compatible versions must match. Accept={}, Content-Type={}\",\n                    RestStatus.BAD_REQUEST,\n                    acceptHeader,\n                    contentTypeHeader\n                );\n            }\n            // both headers should be versioned or none\n            if ((cVersion == null && aVersion != null) || (aVersion == null && cVersion != null)) {\n                throw new ElasticsearchStatusException(\n                    \"A compatible version is required on both Content-Type and Accept headers \"\n                        + \"if either one has requested a compatible version. Accept={}, Content-Type={}\",\n                    RestStatus.BAD_REQUEST,\n                    acceptHeader,\n                    contentTypeHeader\n                );\n            }\n            if (contentTypeVersion < RestApiVersion.current().major) {\n                return Optional.of(RestApiVersion.minimumSupported());\n            }\n        }\n\n        if (acceptVersion < RestApiVersion.current().major) {\n            return Optional.of(RestApiVersion.minimumSupported());\n        }\n\n        if (cVersion == null && aVersion == null) {\n            return Optional.empty();\n        } else {\n            return Optional.of(RestApiVersion.current());\n        }\n    }\n\n    static Byte parseVersion(ParsedMediaType parsedMediaType) {\n        if (parsedMediaType != null) {\n            String version = parsedMediaType.getParameters().get(MediaType.COMPATIBLE_WITH_PARAMETER_NAME);\n            return version != null ? Byte.parseByte(version) : null;\n        }\n        return null;\n    }\n}\n",
    "file_path": "./codebase_small/server/src/main/java/org/elasticsearch/rest/RestCompatibleVersionHelper.java"
  }
]