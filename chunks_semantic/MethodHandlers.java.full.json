{
  "name": "MethodHandlers",
  "type": "class_full",
  "content": "/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the \"Elastic License\n * 2.0\", the \"GNU Affero General Public License v3.0 only\", and the \"Server Side\n * Public License v 1\"; you may not use this file except in compliance with, at\n * your election, the \"Elastic License 2.0\", the \"GNU Affero General Public\n * License v3.0 only\", or the \"Server Side Public License, v 1\".\n */\n\npackage org.elasticsearch.rest;\n\nimport org.elasticsearch.core.RestApiVersion;\nimport org.elasticsearch.http.HttpRouteStats;\nimport org.elasticsearch.http.HttpRouteStatsTracker;\n\nimport java.lang.invoke.MethodHandles;\nimport java.lang.invoke.VarHandle;\nimport java.util.EnumMap;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * Encapsulate multiple handlers for the same path, allowing different handlers for different HTTP verbs and versions.\n */\npublic final class MethodHandlers {\n\n    private final String path;\n    private final Map<RestRequest.Method, Map<RestApiVersion, RestHandler>> methodHandlers;\n\n    @SuppressWarnings(\"unused\") // only accessed via #STATS_TRACKER_HANDLE, lazy initialized because instances consume non-trivial heap\n    private HttpRouteStatsTracker statsTracker;\n\n    private static final VarHandle STATS_TRACKER_HANDLE;\n\n    static {\n        try {\n            STATS_TRACKER_HANDLE = MethodHandles.lookup().findVarHandle(MethodHandlers.class, \"statsTracker\", HttpRouteStatsTracker.class);\n        } catch (NoSuchFieldException | IllegalAccessException e) {\n            throw new ExceptionInInitializerError(e);\n        }\n    }\n\n    MethodHandlers(String path) {\n        this.path = path;\n        this.methodHandlers = new EnumMap<>(RestRequest.Method.class);\n    }\n\n    public String getPath() {\n        return path;\n    }\n\n    /**\n     * Add a handler for an additional array of methods. Note that {@code MethodHandlers}\n     * does not allow replacing the handler for an already existing method.\n     */\n    MethodHandlers addMethod(RestRequest.Method method, RestApiVersion version, RestHandler handler) {\n        RestHandler existing = methodHandlers.computeIfAbsent(method, k -> new EnumMap<>(RestApiVersion.class))\n            .putIfAbsent(version, handler);\n        if (existing != null) {\n            throw new IllegalArgumentException(\"Cannot replace existing handler for [\" + path + \"] for method: \" + method);\n        }\n        return this;\n    }\n\n    /**\n     * Returns the handler for the given method and version.\n     *\n     * If a handler for given version do not exist, a handler for RestApiVersion.current() will be returned.\n     * The reasoning behind is that in a minor a new API could be added passively, therefore new APIs are compatible\n     * (as opposed to non-compatible/breaking)\n     * or {@code null} if none exists.\n     */\n    RestHandler getHandler(RestRequest.Method method, RestApiVersion version) {\n        Map<RestApiVersion, RestHandler> versionToHandlers = methodHandlers.get(method);\n        if (versionToHandlers == null) {\n            return null; // method not found\n        }\n        final RestHandler handler = versionToHandlers.get(version);\n        return handler == null ? versionToHandlers.get(RestApiVersion.current()) : handler;\n    }\n\n    /**\n     * Return a set of all valid HTTP methods for the particular path\n     */\n    Set<RestRequest.Method> getValidMethods() {\n        return methodHandlers.keySet();\n    }\n\n    public HttpRouteStats getStats() {\n        var tracker = existingStatsTracker();\n        if (tracker == null) {\n            return HttpRouteStats.EMPTY;\n        }\n        return tracker.getStats();\n    }\n\n    public HttpRouteStatsTracker statsTracker() {\n        var tracker = existingStatsTracker();\n        if (tracker == null) {\n            var newTracker = new HttpRouteStatsTracker();\n            if ((tracker = (HttpRouteStatsTracker) STATS_TRACKER_HANDLE.compareAndExchange(this, null, newTracker)) == null) {\n                tracker = newTracker;\n            }\n        }\n        return tracker;\n    }\n\n    private HttpRouteStatsTracker existingStatsTracker() {\n        return (HttpRouteStatsTracker) STATS_TRACKER_HANDLE.getAcquire(this);\n    }\n}\n",
  "file_path": "./codebase_small/server/src/main/java/org/elasticsearch/rest/MethodHandlers.java"
}